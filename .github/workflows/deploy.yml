name: Manual Deploy to Server

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to (staging or production)"
        required: true
        default: "production"
    branches:
      - master
      - feature/**
      - release/**

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Set Up SSH
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      # Step 2: Deploy Docker Image
      - name: Deploy Docker Image
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Pull the latest Docker image
          sudo docker pull ${{ secrets.DOCKER_IMAGE }}

          # Stop and remove the old container (if running)
          if sudo docker ps -a --filter "name=my-app-${{ github.event.inputs.environment }}" --format '{{.Names}}' | grep -q "my-app-${{ github.event.inputs.environment }}"; then
            sudo docker stop my-app-${{ github.event.inputs.environment }}
            sudo docker rm my-app-${{ github.event.inputs.environment }}
          else
            echo "No existing container to stop or remove"
          fi

          # Run the new container with environment variables
          sudo docker run -d --name my-app-${{ github.event.inputs.environment }} -p 8080:8080 \
            -e APP_ENV=${{ github.event.inputs.environment }} \
            -e JWT_PUBLIC_KEY=${{ secrets.JWT_PUBLIC_KEY }} \
            -e NOTIFICATION_SERVICE_TOKEN=${{ secrets.NOTIFICATION_SERVICE_TOKEN }} \
            -e JWT_PRIVATE_KEY=${{ secrets.JWT_PRIVATE_KEY }} \
            -e POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
            -e POSTGRES_USERNAME=${{ secrets.POSTGRES_USERNAME }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }} \
            -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
            ${{ secrets.DOCKER_IMAGE }}
          EOF
